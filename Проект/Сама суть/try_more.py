# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'scroll_trying.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import functools


from work_with_photo import cropping
from my_requests import post_requests, get_requests
from func_on_signals import all_signals
import messages_display

class Ui_MainWindow(object):
        def setupUi(self, MainWindow, login):
                self.my_login = login
                
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(1000, 800)
                MainWindow.setStyleSheet("")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.label = QtWidgets.QLabel(self.centralwidget)
                self.label.setGeometry(QtCore.QRect(0, 0, 1000, 800))
                self.label.setStyleSheet("background-color: rgb(189, 210, 255);")
                self.label.setText("")
                self.label.setObjectName("label")
                self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
                self.scrollArea.setGeometry(QtCore.QRect(0, 130, 381, 671))
                self.scrollArea.setStyleSheet("\n"
        " QScrollBar:vertical {\n"
        "    border: none;\n"
        "    background: rgb(45, 45, 68);\n"
        "    width: 14px;\n"
        "    margin: 15px 0 15px 0;\n"
        "    border-radius: 0px;\n"
        " }\n"
        "\n"
        "/*  HANDLE BAR VERTICAL */\n"
        "QScrollBar::handle:vertical {    \n"
        "    background-color: rgb(80, 80, 122);\n"
        "    min-height: 30px;\n"
        "    border-radius: 7px;\n"
        "}\n"
        "QScrollBar::handle:vertical:hover{    \n"
        "    background-color: rgb(255, 0, 127);\n"
        "    \n"
        "    background-color: rgb(189, 210, 255);\n"
        "}\n"
        "QScrollBar::handle:vertical:pressed {    \n"
        "    background-color: rgb(185, 0, 92);\n"
        "}\n"
        "\n"
        "/* BTN TOP - SCROLLBAR */\n"
        "QScrollBar::sub-line:vertical {\n"
        "    border: none;\n"
        "    background-color: rgb(59, 59, 90);\n"
        "    height: 15px;\n"
        "    border-top-left-radius: 7px;\n"
        "    border-top-right-radius: 7px;\n"
        "    subcontrol-position: top;\n"
        "    subcontrol-origin: margin;\n"
        "}\n"
        "QScrollBar::sub-line:vertical:hover {    \n"
        "    background-color: rgb(255, 0, 127);\n"
        "}\n"
        "QScrollBar::sub-line:vertical:pressed {    \n"
        "    background-color: rgb(185, 0, 92);\n"
        "}\n"
        "\n"
        "/* BTN BOTTOM - SCROLLBAR */\n"
        "QScrollBar::add-line:vertical {\n"
        "    border: none;\n"
        "    background-color: rgb(59, 59, 90);\n"
        "    height: 15px;\n"
        "    border-bottom-left-radius: 7px;\n"
        "    border-bottom-right-radius: 7px;\n"
        "    subcontrol-position: bottom;\n"
        "    subcontrol-origin: margin;\n"
        "}\n"
        "QScrollBar::add-line:vertical:hover {    \n"
        "    background-color: rgb(255, 0, 127);\n"
        "}\n"
        "QScrollBar::add-line:vertical:pressed {    \n"
        "    background-color: rgb(185, 0, 92);\n"
        "}\n"
        "\n"
        "/* RESET ARROW */\n"
        "QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {\n"
        "    background: none;\n"
        "}\n"
        "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {\n"
        "    background: none;\n"
        "}\n"
        "\n"
        "\n"
        "\n"
        "/* HORIZONTAL SCROLLBAR - HOMEWORK */\n"
        "QScrollBar:horizontal {\n"
        "   \n"
        "}\n"
        "QScrollBar::handle:horizontal {\n"
        "    \n"
        "}\n"
        "QScrollBar::add-line:horizontal {\n"
        "    \n"
        "}\n"
        "QScrollBar::sub-line:horizontal {\n"
        "    \n"
        "}\n"
        "QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal\n"
        "{\n"
        "\n"
        "}\n"
        "QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal\n"
        "{\n"
        "\n"
        "}")
                self.scrollArea.setWidgetResizable(True)
                self.scrollArea.setObjectName("scrollArea")
                self.scrollAreaWidgetContents = QtWidgets.QWidget()
                self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 365, 2022))
                self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
                self.scrollAreaWidgetContents.setStyleSheet("background-color: rgb(45, 45, 68);")
                self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
                self.verticalLayout_2.setObjectName("verticalLayout_2")
                self.frame = QtWidgets.QFrame(self.scrollAreaWidgetContents)
                self.frame.setMinimumSize(QtCore.QSize(0, 2000))
                font = QtGui.QFont()
                font.setPointSize(10)
                self.frame.setFont(font)
                self.frame.setStyleSheet(" background: rgb(45, 45, 68);")
                self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame.setObjectName("frame")
       
                self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton_1.setGeometry(QtCore.QRect(0, 930, 341, 70))
                font = QtGui.QFont()
                font.setFamily("Source Code Pro Black")
                font.setPointSize(21)
                font.setBold(True)
                font.setWeight(75)
                self.pushButton_1.setFont(font)
                self.pushButton_1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                self.pushButton_1.setMouseTracking(False)
                self.pushButton_1.setStyleSheet("QPushButton {\n"
        "    color: rgb(255, 255, 255);\n"
        "}\n"
        "\n"
        "QPushButton:hover {\n"
        "    \n"
        "    background-color: rgb(73, 73, 111);\n"
        "}\n"
        "")
                self.pushButton_1.setObjectName("pushButton")
                self.verticalLayout_2.addWidget(self.frame)
                self.scrollArea.setWidget(self.scrollAreaWidgetContents)
                
                self.frame_2 = QtWidgets.QFrame(self.centralwidget)
                self.frame_2.setGeometry(QtCore.QRect(410, 370, 271, 80))
                self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_2.setObjectName("frame_2")
        
                self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton_2.setGeometry(QtCore.QRect(610, 160, 271, 141))
                self.pushButton_2.setStyleSheet("background-color: rgb(136, 182, 222);\n"
        "border-radius: 15px")
                self.pushButton_2.setObjectName("pushButton_2")
                self.frame_3 = QtWidgets.QFrame(self.centralwidget)
                self.frame_3.setGeometry(QtCore.QRect(49, 40, 271, 41))
                self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_3.setObjectName("frame_3")
                self.label_2 = QtWidgets.QLabel(self.frame_3)
                self.label_2.setGeometry(QtCore.QRect(0, 0, 271, 41))
                self.label_2.setStyleSheet("background-color: white;\n"
        "border-radius: 10px;\n"
        "borer-color: black;\n"
        "border-size: 3px;")
                self.label_2.setText("")
                self.label_2.setObjectName("label_2")
                self.lineEdit = QtWidgets.QLineEdit(self.frame_3)
                self.lineEdit.setGeometry(QtCore.QRect(0, 0, 271, 41))
                self.lineEdit.setStyleSheet("background: transparent;\n"
        "border-color: transparent;\n"
        "border-radius: 10px;")
                self.lineEdit.setObjectName("lineEdit")
                font = QtGui.QFont()
                font.setFamily("Segoe UI Variable Small Semibol")
                font.setPointSize(17)
                font.setBold(True)
                font.setWeight(75)
                self.lineEdit.setFont(font)
                self.label_4 = QtWidgets.QLabel(self.frame_3)
                self.label_4.setGeometry(QtCore.QRect(230, 3, 32, 32))
                self.label_4.setText("")
                self.label_4.setPixmap(QtGui.QPixmap("search_icon.png"))
                self.label_4.setObjectName("label_4")
                self.label_2.raise_()
                self.label_4.raise_()
                self.lineEdit.raise_()
                self.scrollArea_2 = QtWidgets.QScrollArea(self.centralwidget)
                self.scrollArea_2.setGeometry(QtCore.QRect(-1000, 80, 271, 311))
                # self.scrollArea_2.setGeometry(QtCore.QRect(49, 80, 271, 311))
                self.scrollArea_2.setStyleSheet("\n"
        " QScrollBar:vertical {\n"
        "    border: none;\n"
        "    background: rgb(45, 45, 68);\n"
        "    width: 14px;\n"
        "    margin: 15px 0 15px 0;\n"
        "    border-radius: 0px;\n"
        " }\n"
        "\n"
        "/*  HANDLE BAR VERTICAL */\n"
        "QScrollBar::handle:vertical {    \n"
        "    background-color: rgb(80, 80, 122);\n"
        "    min-height: 30px;\n"
        "    border-radius: 7px;\n"
        "}\n"
        "QScrollBar::handle:vertical:hover{    \n"
        "    background-color: rgb(255, 0, 127);\n"
        "    \n"
        "    background-color: rgb(189, 210, 255);\n"
        "}\n"
        "QScrollBar::handle:vertical:pressed {    \n"
        "    background-color: rgb(185, 0, 92);\n"
        "}\n"
        "\n"
        "/* BTN TOP - SCROLLBAR */\n"
        "QScrollBar::sub-line:vertical {\n"
        "    border: none;\n"
        "    background-color: rgb(59, 59, 90);\n"
        "    height: 15px;\n"
        "    border-top-left-radius: 7px;\n"
        "    border-top-right-radius: 7px;\n"
        "    subcontrol-position: top;\n"
        "    subcontrol-origin: margin;\n"
        "}\n"
        "QScrollBar::sub-line:vertical:hover {    \n"
        "    background-color: rgb(255, 0, 127);\n"
        "}\n"
        "QScrollBar::sub-line:vertical:pressed {    \n"
        "    background-color: rgb(185, 0, 92);\n"
        "}\n"
        "\n"
        "/* BTN BOTTOM - SCROLLBAR */\n"
        "QScrollBar::add-line:vertical {\n"
        "    border: none;\n"
        "    background-color: rgb(59, 59, 90);\n"
        "    height: 15px;\n"
        "    border-bottom-left-radius: 7px;\n"
        "    border-bottom-right-radius: 7px;\n"
        "    subcontrol-position: bottom;\n"
        "    subcontrol-origin: margin;\n"
        "}\n"
        "QScrollBar::add-line:vertical:hover {    \n"
        "    background-color: rgb(255, 0, 127);\n"
        "}\n"
        "QScrollBar::add-line:vertical:pressed {    \n"
        "    background-color: rgb(185, 0, 92);\n"
        "}\n"
        "\n"
        "/* RESET ARROW */\n"
        "QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {\n"
        "    background: none;\n"
        "}\n"
        "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {\n"
        "    background: none;\n"
        "}\n"
        "\n"
        "\n"
        "\n"
        "/* HORIZONTAL SCROLLBAR - HOMEWORK */\n"
        "QScrollBar:horizontal {\n"
        "   \n"
        "}\n"
        "QScrollBar::handle:horizontal {\n"
        "    \n"
        "}\n"
        "QScrollBar::add-line:horizontal {\n"
        "    \n"
        "}\n"
        "QScrollBar::sub-line:horizontal {\n"
        "    \n"
        "}\n"
        "QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal\n"
        "{\n"
        "\n"
        "}\n"
        "QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal\n"
        "{\n"
        "\n"
        "}")

                self.scrollArea_2.setWidgetResizable(True)
                self.scrollArea_2.setObjectName("scrollArea_2")
                self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
                self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 255, 2022))
                self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
                self.scrollAreaWidgetContents_2.setStyleSheet("background-color: rgb(45, 45, 68);")
                self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
                self.verticalLayout_3.setObjectName("verticalLayout_3")
                self.frame_4 = QtWidgets.QFrame(self.scrollAreaWidgetContents_2)
                self.frame_4.setMinimumSize(QtCore.QSize(0, 2000))
                font = QtGui.QFont()
                font.setPointSize(10)
                self.frame_4.setFont(font)
                self.frame_4.setStyleSheet(" background: rgb(45, 45, 68);")
                self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_4.setObjectName("frame_4")
                self.label_avatar = QtWidgets.QLabel(self.centralwidget)
                self.label_avatar.setEnabled(True)
                self.label_avatar.setGeometry(QtCore.QRect(470, 20, 430, 430))
                self.label_avatar.setText("")
                # self.label_avatar.setPixmap(QtGui.QPixmap("Images/blur_bg.png"))
                self.label_avatar.setObjectName("label")

                
                self.scrollArea_3 = QtWidgets.QScrollArea(self.centralwidget)
                self.scrollArea_3.setGeometry(QtCore.QRect(-2000, 130, 651, 591))
                # self.scrollArea_3.setGeometry(QtCore.QRect(380, 130, 651, 591))
                self.scrollArea_3.setStyleSheet("\n"
        " QScrollBar:vertical {\n"
        "    border: none;\n"
        "    background: rgb(45, 45, 68);\n"
        "    width: 14px;\n"
        "    margin: 15px 0 15px 0;\n"
        "    border-radius: 0px;\n"
        " }\n"
        "\n"
        "/*  HANDLE BAR VERTICAL */\n"
        "QScrollBar::handle:vertical {    \n"
        "    background-color: rgb(80, 80, 122);\n"
        "    min-height: 30px;\n"
        "    border-radius: 7px;\n"
        "}\n"
        "QScrollBar::handle:vertical:hover{    \n"
        "    background-color: rgb(255, 0, 127);\n"
        "    \n"
        "    background-color: rgb(189, 210, 255);\n"
        "}\n"
        "QScrollBar::handle:vertical:pressed {    \n"
        "    background-color: rgb(185, 0, 92);\n"
        "}\n"
        "\n"
        "/* BTN TOP - SCROLLBAR */\n"
        "QScrollBar::sub-line:vertical {\n"
        "    border: none;\n"
        "    background-color: rgb(59, 59, 90);\n"
        "    height: 15px;\n"
        "    border-top-left-radius: 7px;\n"
        "    border-top-right-radius: 7px;\n"
        "    subcontrol-position: top;\n"
        "    subcontrol-origin: margin;\n"
        "}\n"
        "QScrollBar::sub-line:vertical:hover {    \n"
        "    background-color: rgb(255, 0, 127);\n"
        "}\n"
        "QScrollBar::sub-line:vertical:pressed {    \n"
        "    background-color: rgb(185, 0, 92);\n"
        "}\n"
        "\n"
        "/* BTN BOTTOM - SCROLLBAR */\n"
        "QScrollBar::add-line:vertical {\n"
        "    border: none;\n"
        "    background-color: rgb(59, 59, 90);\n"
        "    height: 15px;\n"
        "    border-bottom-left-radius: 7px;\n"
        "    border-bottom-right-radius: 7px;\n"
        "    subcontrol-position: bottom;\n"
        "    subcontrol-origin: margin;\n"
        "}\n"
        "QScrollBar::add-line:vertical:hover {    \n"
        "    background-color: rgb(255, 0, 127);\n"
        "}\n"
        "QScrollBar::add-line:vertical:pressed {    \n"
        "    background-color: rgb(185, 0, 92);\n"
        "}\n"
        "\n"
        "/* RESET ARROW */\n"
        "QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {\n"
        "    background: none;\n"
        "}\n"
        "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {\n"
        "    background: none;\n"
        "}\n"
        "\n"
        "\n"
        "\n"
        "/* HORIZONTAL SCROLLBAR - HOMEWORK */\n"
        "QScrollBar:horizontal {\n"
        "   \n"
        "}\n"
        "QScrollBar::handle:horizontal {\n"
        "    \n"
        "}\n"
        "QScrollBar::add-line:horizontal {\n"
        "    \n"
        "}\n"
        "QScrollBar::sub-line:horizontal {\n"
        "    \n"
        "}\n"
        "QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal\n"
        "{\n"
        "\n"
        "}\n"
        "QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal\n"
        "{\n"
        "\n"
        "}")
                self.scrollArea_3.setWidgetResizable(True)
                self.scrollArea_3.setObjectName("scrollArea_3")
                self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
                self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 635, 2022))
                self.scrollAreaWidgetContents_3.setStyleSheet("background-color: rgb(45, 45, 68);")
                self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
                self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_3)
                self.verticalLayout_4.setObjectName("verticalLayout_4")
                self.frame_6 = QtWidgets.QFrame(self.scrollAreaWidgetContents_3)
                self.frame_6.setMinimumSize(QtCore.QSize(0, 580))
                font = QtGui.QFont()
                font.setPointSize(10)
                self.frame_6.setFont(font)
                self.frame_6.setStyleSheet("background-color: rgb(45, 45, 68);")
                self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_6.setObjectName("frame_6")

       
                
                self.verticalLayout_4.addWidget(self.frame_6)
                self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)

 
                
                self.label_avatar = QtWidgets.QLabel(self.centralwidget)
                self.label_avatar.setEnabled(True)
                self.label_avatar.setGeometry(QtCore.QRect(470, 20, 430, 430))
                self.label_avatar.setText("")
                # self.label_avatar.setPixmap(QtGui.QPixmap("Images/blur_bg.png"))
                self.label_avatar.setObjectName("label")



                self.textMessage = QtWidgets.QTextEdit(self.centralwidget)
                self.textMessage.setGeometry(QtCore.QRect(420, -1000, 451, 51))
                # self.textMessage.setGeometry(QtCore.QRect(420, 730, 451, 51))
                font = QtGui.QFont()
                font.setPointSize(18)
                self.textMessage.setFont(font)
                self.textMessage.setObjectName("textEdit")
                self.textMessage.setPlaceholderText("Новое сообщение")
                self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton_4.setGeometry(QtCore.QRect(880, -1000, 93, 51))
                # self.pushButton_4.setGeometry(QtCore.QRect(880, 730, 93, 51))
                font = QtGui.QFont()
                font.setPointSize(-1)
                self.pushButton_4.setFont(font)
                self.pushButton_4.setStyleSheet("QPushButton {\n"
        "    border-width: 4px;\n"
        "    border-style: solid;\n"
        "    border-radius: 18px;\n"
        "    border-color: black;\n"
        "    background-color: rgb(189, 210, 255);\n"
        "    font-size: 20px;\n"
        "    \n"
        "}\n"
        "\n"
        "QPushButton:hover {\n"
        "    font-size: 22px;\n"
        "    background-color: rgb(170, 183, 255);\n"
        "}")
                self.pushButton_4.setObjectName("pushButton_4")


                self.frame_5 = QtWidgets.QFrame(self.centralwidget)
                self.frame_5.setGeometry(QtCore.QRect(440, -1000, 521, 80))
                # self.frame_5.setGeometry(QtCore.QRect(440, 0, 521, 80))
                self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_5.setObjectName("frame_5")
                self.label_3 = QtWidgets.QLabel(self.frame_5)
                self.label_3.setGeometry(QtCore.QRect(0, 0, 521, 81))
                self.label_3.setStyleSheet("background-color: rgb(33, 33, 33);\n"
        "border-width: 4px;\n"
        "    border-style: solid;\n"
        "border-radius: 20px;\n"
        "border-color: rgb(135, 116, 225);")
                self.label_3.setText("")
                self.label_3.setObjectName("label_3")
                self.label_5 = QtWidgets.QLabel(self.frame_5)
                self.label_5.setGeometry(QtCore.QRect(20, 20, 45, 45))
                self.label_5.setText("")
                self.label_5.setPixmap(QtGui.QPixmap("Images/my_avatar.png"))
                self.label_5.setObjectName("label_5")
                self.label_6 = QtWidgets.QLabel(self.frame_5)
                self.label_6.setGeometry(QtCore.QRect(90, 30, 261, 31))
                font = QtGui.QFont()
                font.setPointSize(18)
                self.label_6.setFont(font)
                self.label_6.setStyleSheet("color: white;")
                self.label_6.setObjectName("label_6")


                # Длина списка, который показывается пользователю равна 10
                self.user_search_list = []
                for i in range(10):
                        self.pushButton_3 = QtWidgets.QPushButton(self.frame_4)
                        self.pushButton_3.setGeometry(QtCore.QRect(0, 0, 231, 61))
                        font = QtGui.QFont()
                        font.setFamily("Source Code Pro Black")
                        font.setPointSize(21)
                        font.setBold(True)
                        font.setWeight(75)
                        self.pushButton_3.setFont(font)
                        self.pushButton_3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                        self.pushButton_3.setMouseTracking(False)
                        self.pushButton_3.setStyleSheet("QPushButton {\n"
                                                        "    color: rgb(255, 255, 255);\n"
                                                        "}\n"
                                                        "\n"
                                                        "QPushButton:hover {\n"
                                                        "    \n"
                                                        "    background-color: rgb(73, 73, 111);\n"
                                                        "}\n"
                                                        "")
                        self.pushButton_3.setObjectName("pushButton_3")


                        self.user_search_list.append(self.pushButton_3)



                self.verticalLayout_3.addWidget(self.frame_4)
                self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)


                MainWindow.setCentralWidget(self.centralwidget)

                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

                # Те юзеры, с кем у меня была переписка
                # Надо будет сортировать по количеству непрочитанных сообщений

                users_list = all_signals.get_users_of_chats(self, self.my_login)

                if users_list == False:
                        users_list = []

                

                self.user_chat_list = {}
                y = 0 
                i = 0
                for user in users_list:
                        self.pushButton = QtWidgets.QPushButton(self.frame)
                        self.pushButton.setGeometry(QtCore.QRect(0, y, 341, 70))
                        font = QtGui.QFont()
                        font.setFamily("Source Code Pro Black")
                        font.setPointSize(21)
                        font.setBold(True)
                        font.setWeight(75)
                        self.pushButton.setFont(font)
                        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                        self.pushButton.setMouseTracking(False)
                        self.pushButton.setStyleSheet("QPushButton {\n"
                "    color: rgb(255, 255, 255);\n"
                "}\n"
                "\n"
                "QPushButton:hover {\n"
                "    \n"
                "    background-color: rgb(73, 73, 111);\n"
                "}\n"
                "")
                        self.pushButton.setObjectName("pushButton")
                        self.pushButton.setText(user)

                        # Высота кнопки
                        y += 70


                        self.user_chat_list[self.pushButton] = i
                        i += 1

                # folder = 'Chats'
                # messages_display.start_message_display(self, folder)

                # Теперь получаем переписки (они записываются в файлы)
                all_signals.get_user_chats(self, self.my_login, users_list)

                self.add_signals()
                self.add_some_variables()


        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                # self.pushButton.setText(_translate("MainWindow", "Получить аву"))
                self.pushButton_1.setText(_translate("MainWindow", "Запостить аву"))

        #         self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
        # "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
        # "p, li { white-space: pre-wrap; }\n"
        # "</style></head><body style=\" font-family:\'Segoe UI Variable Small Semibol\'; font-size:17pt; font-weight:600; font-style:normal;\">\n"
        # "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:20pt; font-weight:400;\">cxzcx</span></p></body></html>"))
        #         self.textBrowser_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
        # "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
        # "p, li { white-space: pre-wrap; }\n"
        # "</style></head><body style=\" font-family:\'Segoe UI Variable Small Semibol\'; font-size:17pt; font-weight:600; font-style:normal;\">\n"
        # "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:20pt; font-weight:400;\">cxzcx</span></p></body></html>"))
               
                self.pushButton_2.setText(_translate("MainWindow", "fdsf"))
                self.pushButton_4.setText(_translate("MainWindow", "Send"))
                self.label_6.setText(_translate("MainWindow", "Андрей"))

                

        


        # Удаление кнопок с логинами, которые появляются при поиске
        def user_search_list_to_back(self):
                for el in self.user_search_list:
                        el.setGeometry(QtCore.QRect(-1000, 0, 231, 61))
                        el.setText('')


        def list_to_back(self):
                self.scrollArea_2.setGeometry(QtCore.QRect(-1000, 80, 271, 311))


        def list_to_center(self, result):
                self.scrollArea_2.setGeometry(QtCore.QRect(49, 80, 271, 311))

                y = 0
                # Создание кнопок и их заполнение
                for i in range(len(result)):
                        login = result[i]

                        self.user_search_list[i].setGeometry(QtCore.QRect(0, y, 231, 61))
                        self.user_search_list[i].setText(login)

                        y += self.user_search_list[i].geometry().height()


        def show_list(self, result):
                
                if len(result) >= 1:
                        self.list_to_center(result)
                else:
                        self.list_to_back()


        def show_chat(self, direct_file):
                with open(direct_file, 'r') as file:
                        for line in file.readlines():
                                pass

        def send_message(self, name):
                

                self.textBrowser_2 = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_3)
                self.textBrowser_2.setGeometry(QtCore.QRect(0, 0, 381, 61))
                font = QtGui.QFont()
                font.setFamily("Segoe UI Variable Small Semibol")
                font.setPointSize(17)
                font.setBold(True)
                font.setWeight(75)
                self.textBrowser_2.setFont(font)
                self.textBrowser_2.setStyleSheet("background-color: rgb(33, 33, 33);\n"
        "border-radius: 15px;\n"
        "color: white;")
                self.textBrowser_2.setObjectName("textBrowser_2")

                self.textBrowser_2.setText('kpaskfpkfs')

                self.verticalLayout_4.addWidget(self.textBrowser_2)
               
                                            
                
        def add_signals(self):
                self.lineEdit.textChanged.connect(lambda: all_signals.search_users(self))
                self.textMessage.textChanged.connect(lambda: all_signals.message_typing(self))
                
                self.pushButton_4.clicked.connect(lambda: all_signals.send_message(self, self.my_login))

                # self.pushButton.clicked.connect(lambda: all_signals.get_avatar(self))
                self.pushButton_1.clicked.connect(lambda: all_signals.post_avatar(self))

                # Будет передаваться из страницы авторизации
                

                # Костьль или нет? Просто через цикл не получается      
                self.user_search_list[0].clicked.connect(lambda: all_signals.show_chat_with_person(self, 0, self.my_login))
                self.user_search_list[1].clicked.connect(lambda: all_signals.show_chat_with_person(self, 1, self.my_login))
                self.user_search_list[2].clicked.connect(lambda: all_signals.show_chat_with_person(self, 2, self.my_login))
                self.user_search_list[3].clicked.connect(lambda: all_signals.show_chat_with_person(self, 3, self.my_login))
                self.user_search_list[4].clicked.connect(lambda: all_signals.show_chat_with_person(self, 4, self.my_login))
                self.user_search_list[5].clicked.connect(lambda: all_signals.show_chat_with_person(self, 5, self.my_login))
                self.user_search_list[6].clicked.connect(lambda: all_signals.show_chat_with_person(self, 6, self.my_login))
                self.user_search_list[7].clicked.connect(lambda: all_signals.show_chat_with_person(self, 7, self.my_login))
                self.user_search_list[8].clicked.connect(lambda: all_signals.show_chat_with_person(self, 8, self.my_login))
                self.user_search_list[9].clicked.connect(lambda: all_signals.show_chat_with_person(self, 9, self.my_login))

                self.some = list(range(len(self.user_chat_list)))
                for key in self.user_chat_list.keys():
                        
                        key.clicked.connect(functools.partial(all_signals.show_chat_with_user, self, key, self.my_login))


                


                self.timer_2 = QtCore.QTimer()
                self.timer_2.timeout.connect(lambda: all_signals.make_last_messages_request(self, self.my_login))

                # Запросы каждые 1 секунду
                self.timer_2.start(1000)
                

                # for i in range(len(self.user_search_list)):
                #         self.user_search_list[i].clicked.connect(lambda: all_signals.show_chat_with_person(self, i))


        def add_some_variables(self):
                self.users_list_to_delete = []

                # Это сообщения чата
                self.users_messages_to_delete = []

# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())
